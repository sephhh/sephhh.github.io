<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: canvas | Seph's Blog]]></title>
  <link href="http://sephhh.github.io/blog/categories/canvas/atom.xml" rel="self"/>
  <link href="http://sephhh.github.io/"/>
  <updated>2015-06-04T10:22:06-04:00</updated>
  <id>http://sephhh.github.io/</id>
  <author>
    <name><![CDATA[Seph Kramer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Playing with the Canvas: Trippy Text]]></title>
    <link href="http://sephhh.github.io/blog/2015/06/03/playing-with-the-canvas-trippy-text/"/>
    <updated>2015-06-03T22:28:55-04:00</updated>
    <id>http://sephhh.github.io/blog/2015/06/03/playing-with-the-canvas-trippy-text</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s a little doo-hickey I made:</p>

<p data-height="268" data-theme-id="0" data-slug-hash="ZGLMKm" data-default-tab="result" data-user="sephhh" class='codepen'>See the Pen <a href='http://codepen.io/sephhh/pen/ZGLMKm/'>Trippy Text</a> by Seph Kramer (<a href='http://codepen.io/sephhh'>@sephhh</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<script async src="//assets.codepen.io/assets/embed/ei.js"></script>


<p>Some text bounces around the screen, changing colors (controlled in part by mouse movements). You can click to move the text, and if you press return you can type in your own text.</p>

<p>A few reasons I made this:</p>

<ul>
    <li>I wanted to play around with an HTML5 Canvas</li>
    <li>I wanted to get some practice with jQuery event handlers</li>
    <li>I wanted something that was kinda fun to play with!</li>
</ul>


<p>Here I thought I&rsquo;d walk through some basics of using JavaScript to draw on a <code>&lt;canvas&gt;</code> element, and explain a bit of my code.</p>

<h3>Using the Canvas</h3>


<p>The first thing you need is a <code>&lt;canvas&gt;</code> element. You&rsquo;ll probably want to give it an id too so you can easily select it with JavaScript. Here I&rsquo;m also giving it a width and height, as well as a border to make it easier to see on the page.</p>

<pre><code class="html">&lt;canvas id="myCanvas" height=200 width=200 style="border:1px solid #000000"&gt;&lt;/canvas&gt;
</code></pre>

<p>Now to start drawing on this canvas we need to create a new <em>context</em>. By creating this context, you get a JavaScript object that you can call a bunch of methods on to render things on your canvas.</p>

<pre><code class="javascript">$(document).ready(function(){
  // set up initial variables
  var c = document.getElementById("myCanvas");
  var ctx = c.getContext("2d");

  //...more to come
}
</code></pre>

<p>Here I select the canvas element, save it as <code>c</code>. Then I create a context object, which I save as <code>ctx</code> by calling <code>c.getContext("2d")</code>. (<code>getContext</code> also accepts <code>webgl</code> as an argument if you want to mess with 3D, but that&rsquo;s a whole other story).</p>

<p>Now we can call all kinds of methods on <code>ctx</code> to start drawing stuff. Here&rsquo;s how to draw some simple lines:</p>

<pre><code class="javascript">  ctx.beginPath();
  ctx.moveTo(100,0);
  ctx.lineTo(100,200);
  ctx.moveTo(0,100);
  ctx.lineTo(200,100);

  ctx.stroke();
</code></pre>

<p><canvas id="canvas1" height=200 width=200 style="border:1px solid #000000;"></canvas></p>

<p>You can imagine this code is controlling a pen. <code>moveTo</code> moves the pen point to a pixel location on the canvas, then <code>lineTo</code> tells it to put down the point and draw to another location. But nothing will actually appear on the canvas until we call <code>stroke</code>.</p>

<p>There&rsquo;s plenty of other methods for drawing other shapes and text, but let&rsquo;s move on to making a simple animation.</p>

<h3>A Simple Animation</h3>


<p>Here I&rsquo;ll animate a red circle so that it floats across the canvas. Here&rsquo;s a function that takes an x-coordinate and draws a red circle there:</p>

<pre><code class="javascript">function drawCircle(x){
  ctx.beginPath();
  ctx.arc(x,100,10,0,2*Math.PI);
  ctx.fillStyle="red";
  ctx.fill();
}
</code></pre>

<p>It&rsquo;s pretty easy to make the circle move across the screen&ndash;all we need to do is repeat the following steps very quickly:</p>

<ul>
    <li>Clear off the canvas</li>
    <li>Draw a circle at pixel x</li>
    <li>Increment x</li>
</ul>


<p>Here&rsquo;s the code to do that:</p>

<pre><code class="javascript">var x = 0;
setInterval(function(){ 
  //clear out the entire canvas
  ctx.clearRect(0,0,200,200);
  //draw a circle at x
  drawCircle(x%200);
  //increment x
  x++;
}, 25);
</code></pre>

<p>Here I use <code>setInterval</code> to run a function every 25 milliseconds. Each time that function runs, it clears the screen, draws a new circle, then increments <code>x</code> so the circle will be drawn slightly to the right next time around. I use modulo in the expression <code>x%200</code> to make the circle wrap around the canvas once <code>x</code> is higher than 200.</p>

<p><canvas id="canvas2" height=200 width=200 style="border:1px solid #000000;"></canvas></p>

<h3>Trippy Text Event Handlers</h3>


<p>For my little trippy text toy, I use <code>setInterval</code> the same way, but with a little extra logic. During each animation step I have to check if the text needs to bounce, plus I oscillate the blue value of the text&rsquo;s color during each step. Also, I skip clearing the screen at each step so that the trail of the text remains on screen.</p>

<p>On top of that I added a couple of jQuery handlers to allow some interaction. This one responds to mouse movements to change the color of the text:</p>

<pre><code class="javascript">  $(document).mousemove(function(event){
    tt.gValue = Math.round(event.pageX*lScale);
    tt.rValue = Math.round(event.pageY*hScale);
  });
</code></pre>

<p>Here, <code>tt</code> is an object I defined to represent the floating text. When the mouse moves, I use the mouse&rsquo;s x and y location, scale it to a value between 0 and 256, and set the <code>gValue</code> and <code>rValue</code> of the text object accordingly, changing it&rsquo;s color.</p>

<p>Here&rsquo;s the code that moves the text when you click the screen.</p>

<pre><code class="javascript">$(document).click(function(event){
    if (event.pageX &gt; c.width-tt.xBuffer()){
       tt.textX = c.width-tt.xBuffer();
    }else{
       tt.textX = event.pageX;
    }
    if (event.pageY &lt;= 50){
       tt.textY = 50;
    }else{
       tt.textY = event.pageY;
}
</code></pre>

<p>The basic idea is that when the canvas is clicked, the text should move to that click location. But first I check to see if the click is too close to an edge of the canvas, in which case I make sure there is a buffer (i.e. <code>tt.xbuffer</code>) between the text and the edge of the canvas (<code>c.width</code>).</p>

<h3>Conclusion</h3>


<p>That&rsquo;s a quick rundown of working with a canvas in JavaScript, and some basics features of my little toy. It&rsquo;s pretty easy to start having fun with the canvas, I definitely recommend fooling around with it sometime.</p>

<script>
  var c1 = document.getElementById("canvas1");
  var ctx1 = c1.getContext("2d");
 
  ctx1.beginPath();
  ctx1.moveTo(100,0);
  ctx1.lineTo(100,200);
  ctx1.moveTo(0,100);
  ctx1.lineTo(200,100);
  ctx1.stroke();

  var c2 = document.getElementById("canvas2");
  var ctx2 = c2.getContext("2d");
  
  function drawCircle(x){
    ctx2.beginPath();
    ctx2.arc(x,100,10,0,2*Math.PI);
    ctx2.fillStyle="red";
    ctx2.fill();
  }

  var x = 0;

  setInterval(function(){ 
    //clear out the entire canvas
    ctx2.clearRect(0,0,200,200);
    //draw a circle at x
    drawCircle(x%200);
    //increment x
    x++;
}, 25);

</script>



]]></content>
  </entry>
  
</feed>

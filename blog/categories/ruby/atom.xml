<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Seph's Blog]]></title>
  <link href="http://sephhh.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://sephhh.github.io/"/>
  <updated>2015-06-04T10:22:06-04:00</updated>
  <id>http://sephhh.github.io/</id>
  <author>
    <name><![CDATA[Seph Kramer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My First Rails App: Lessons Learned]]></title>
    <link href="http://sephhh.github.io/blog/2015/05/12/my-first-rails-app-lessons-learned/"/>
    <updated>2015-05-12T22:00:59-04:00</updated>
    <id>http://sephhh.github.io/blog/2015/05/12/my-first-rails-app-lessons-learned</id>
    <content type="html"><![CDATA[<p>This past week me and <a href="https://github.com/tmurray002">Tim</a> built a Rails app called <a href="https://github.com/sephhh/ConcertCurator">ConcertCurator</a>. Basically this app lists a bunch of upcoming concerts in NYC and has some nice ways to browse through them. This is my first time working on a Rails app from scratch, and I thought I&rsquo;d blog about two challenges we ran into along the way, and the workarounds we found.</p>

<h3>Challenge 1: Find Similar Show</h3>


<p>One challenge was getting this button to work:</p>

<p><img src="http://sephhh.github.io/images/genre_button.png" alt="Similar Show Button"></p>

<p>The idea here is to take an event, and if the event has genres associated with it, find another show that has at least one of those generes associated with it too.</p>

<p>The logic isn&rsquo;t super complex here, and we were able to get some code working before too long. But even though the button worked, it was extremely slow. Here&rsquo;s that first pass.</p>

<pre><code class="ruby">
# Inside the Event model
def self.find_similar_shows(genre_ids)
  self.select do |event|
    event.artists.any? do |artist|
      genre_ids &amp; artist.genres.pluck(:id) != []
    end
  end
end
</code></pre>

<p>This method is inside the <code>Event</code> model. It works something like this:</p>

<ul>
  <li>Iterate through all the events</li>
  <li>For each event, look through all the associated artists</li>
  <li> Finally, for each artist see if it has any genres in common with the ones we passed in</li>
  <li> If so, add that to the selection of events that the method returns</li>
</ul>


<p>The logic is sound here, and the code works, but it&rsquo;s SOOOO slow because it&rsquo;s making SOOOO many queries to the database. These nested iterations are really costly.</p>

<p>Here&rsquo;s the refactored code. This new version is much faster:</p>

<pre><code class="ruby"># Inside the Event model
def self.find_similar_shows(genre_id)
  self.joins(:artists =&gt; :genres).where(genres: {id: genre_id})
end
</code></pre>

<p>This version uses <code>joins</code> to join the genres table to the events table through the artists table, then uses <code>where</code> to make a single query to that giant joined table. This version really cooperates with SQL much better and uses its strengths. Instead of querying the database a ton of times with little simple queries, we just make a single, complex query to the database and let SQL do more of the heavy lifting. This spits out a response muuuuch much faster than the original version.</p>

<h3>Challenge 2: Loading a Map</h3>


<p>On each page that shows an event or a venue, our app uses the Google Maps API to show the location of the venue.</p>

<p><img src="http://sephhh.github.io/images/map_sample.png" alt="A Map on an Event Page"></p>

<p>We didn&rsquo;t do anything super fancy here&ndash;we had each venue&rsquo;s longitude and latitude from another API so we just had to plug that in and render a map.</p>

<p>The tricky part was getting the map to actually show up on the page. At first we had a bug where, when we first navigated to a page, no map would show, but then after manually refreshing it would pop up. What gives?</p>

<p>Here&rsquo;s our original code:</p>

<pre><code class="ruby">function initialize() {
  var myLatlng = //grab lat-long of current venue
  var my_venue = //grab the venue name
  var mapOptions = {
    //map options here
  };
  var map = new google.maps.Map(document.getElementById('map-canvas'),
      mapOptions);
  var marker = new google.maps.Marker({
  position: myLatlng,
  map: map,
  title: my_venue
  });
}
google.maps.event.addDomListener(window, 'load', initialize);
</code></pre>

<p>Basically, this code sets up some variabales we need for the map inside an <code>initialize</code> function. Then, the last line listens for the window <code>load</code> event, at which point it calls <code>initialize</code> and renders the map. So why did we have to refresh the page to trigger this? Why didn&rsquo;t the window <code>load</code> event trigger our function every time we navigated to the page?</p>

<p>The answer has to do with Turbolinks!!!</p>

<iframe src="//giphy.com/embed/cRH5deQTgTMR2" width="480" height="360" frameBorder="0" style="max-width: 100%" class="giphy-embed" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>




<h4>Turbolinks</h4>


<p>Turbolinks are this feature built into Rails that loads the page without &ldquo;really&rdquo; &ldquo;loading&rdquo; the &ldquo;page&rdquo;. When you click on a link, it uses an AJAX call to just swap in the new body of the page, rather than loading the whole page from scratch. This makes clicking around faster, which is all well and good, but it doesn&rsquo;t trigger the window &lsquo;load&rsquo; event that our code is patiently listening for.</p>

<p>So here&rsquo;s the fix&ndash;just need to add one more line of code:</p>

<pre><code class="ruby">google.maps.event.addDomListener(window, 'load', initialize);
google.maps.event.addDomListener(window, 'page:load', initialize);
</code></pre>

<p>Now, on top of listening to the normal window <code>load</code> event, we&rsquo;re also listening for the <code>page:load</code> event. This is a special event that Turbolinks creates&ndash;since it&rsquo;s bypassing a normal load, Turbolinks gives us this alternate way for us to hook into this part of the cycle and trigger our <code>initialize</code> function. See <a href="https://github.com/rails/turbolinks/blob/master/README.md">here</a> for more documentation on Turbolinks.</p>

<h3>Conclusion</h3>


<p>Building this app was a lot of fun! Even some of the tricker parts were satisfying to work through. These two challenges I just walked through I thought were particularly interesting, and definitely taught me some handy lessons. Hope you agree!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.. Flip-flops ..]]></title>
    <link href="http://sephhh.github.io/blog/2015/04/28/flip-flops/"/>
    <updated>2015-04-28T16:50:22-04:00</updated>
    <id>http://sephhh.github.io/blog/2015/04/28/flip-flops</id>
    <content type="html"><![CDATA[<p>Flip-flops are a funky and fairly obscure feature in Ruby. In fact, there have been <a href="https://bugs.ruby-lang.org/issues/5400">murmers</a> about flip-flops being removed in future versions of Ruby altogether. Most folks probably wouldn&rsquo;t notice if these things disappeared from Ruby tomorrow, but this quirky mechanism can be nifty and fun to play around with once you get the hang of it.</p>

<p>I first came across flip-flops in Konstantin Haase&rsquo;s <a href="https://vimeo.com/61087285">talk at Ruby Australia</a> where he talks about obfuscation and presents his 6-line implementation of Sinatra. In the talk, Haase presents the following code and asks what it will produce.</p>

<pre><code class="ruby">1.upto 10 do |i|
  puts i if i == 3 .. i == 5
end
</code></pre>

<p>Can you guess the output yourself? Any idea why? The key is the flip-flop, which is used here in the if condition. Let&rsquo;s take a look.</p>

<h3>Making Flippy Floppy</h3>


<p>In electronics, a flip-flop is a circuit that can have one of two states, On or Off (1 or 0). Along these lines, Ruby flip-flops act like a switch that can be flipped on and off (or like a gate that can be either open or closed). The syntax for a flip-flop uses a range operator <code>(..)</code> but the range spans between two conditions instead of two numbers. If you can hold those two ideas in your head, ranges and switches, you can sort of see how the flip-flop behaves like a switch that turns On for a certain range before turning Off again. What determines whether the if clause gets evaluated is not the truth of either condition, but the overall state of the flip-flop: On or Off. Here&rsquo;s the flip-flop from earlier again.</p>

<pre><code class="ruby">1.upto 10 do |i|
  puts i if i == 3 .. i == 5
end
</code></pre>

<p>When the first condition is met (<code>i==3</code>), you can imagine the switch flipping On, so the conditional if clause is executed, and the code prints <code>i</code>. That&rsquo;s all well and good&ndash;just what you&rsquo;d expect from an if statement when the condition is true. But here&rsquo;s the kicker: that if clause is executed the next time through the loop too, when <code>i</code> is 4. The flip-flop has been switched On, and that On or <code>true</code> state persists through subsequent iterations. The if clause (in this case, <code>puts i</code>) continues to run on each iteration until the <em>second</em> condition is true (in this case, <code>i == 5</code>). That switches the flip-flop back off. If on a later iteration the first condition evalutes to true again, the flip-flop switches back On, and stays On, executing the if clause until the second condition is true again, and so on indefinitely.</p>

<p>So now maybe it makes sense (kind of) how the code actually evaluates:</p>

<pre><code class="ruby">1.upto 10 do |i|
  puts i if i == 3 .. i == 5
end

# 3
# 4
# 5
</code></pre>

<p>In case you were starting to feel less confused, flip-flops can have either two or three dots between the two conditions, and they behave a bit differently in each case. If you use two dots, the second condition is evaluated <em>immediately</em> as soon as the first condition evaluates to <code>true</code>. That means that if both conditions are true on the same iteration, the switch will turn on and then immediately off again, executing the conditional clause exactly once:</p>

<pre><code class="ruby">1.upto 10 do |i|
  puts i if i == 3 .. i == 3
end

# 3
</code></pre>

<p>With three dots, on the other hand, the second condition won&rsquo;t be evaluated until the iteration <em>after</em> the first condition becomes true.</p>

<pre><code class="ruby">1.upto 10 do |i|
  puts i if i == 3 ... i == 3
end

# 3
# 4
# 5
# ... all the way on up to 10
</code></pre>

<p>So in this code, instead of starting and then stopping at three, the flip-flop just switches On and never switches Off. It keeps printing <code>i</code> for the rest of the iterations (again, these examples come from Haase&rsquo;s talk)</p>

<h3>Flizz Fluzz</h3>


<p>If you feel like getting deeper into the weeds, here&rsquo;s a devious flip-flopping version of fizzbuzz written by <a href="https://gist.github.com/judofyr/3230984">Magnus Holm</a>:</p>

<pre><code class="ruby">a=b=c=(1..100).each do |num|
  print num, ?\r,
    ("Fizz" unless (a = !a) .. (a = !a)),
    ("Buzz" unless (b = !b) ... !((c = !c) .. (c = !c))),
    ?\n
end
</code></pre>

<p>There&rsquo;s a very nice detailed breakdown of this code on <a href="https://juliansimioni.com/blog/deconstructing-fizz-buzz-with-flip-flops-in-ruby/">Julian Simioni&rsquo;s blog</a>, but here are a few highlights:</p>

<ul>
    <li>Notice how the flip-flop conditions actually include assignments&#8211;the truth value of the variable <code>a</code> is reversed each time one of those conditions is evaluated.</li>
    <li>Which condition is evaluated depends on the state of the flip-flop&#8211;the first condition will only be evaluated if the flip-flop is Off, and the second condition will only be evaluated if it&#8217;s On. This very craftily makes it so the flip-flop is Off every third iteration (which makes it print &#8220;Fizz&#8221;).</li>
    <li>The solution also very sneakily uses <code>\r</code>, which is a carriage return. That essentially moves the cursor back to the very front of the line without going to a new line, which means when you print you&#8217;ll just overwrite any characters written on that line already. (This way the solution doesn&#8217;t have to worry about skipping any numbers: it just overwrites them)</li>
</ul>




<h3>Trying it out</h3>


<p>I decided to give flip-flops a try on my own with a simple function meant to highlight or otherwise mess with certain marked portions of text. The idea is, whenever a line starts with a certain marker (like <code>~</code>), my function will do something to change or highlight each line of text, until that highlighting is turned off by a subsequent marker. Here it goes:</p>

<pre><code class="ruby">
def highlight_file(filepath, marker)
  #read in the file
  orig_lines = File.readlines(filepath)
   updated_lines = orig_lines.collect do |line|

    #Turn the flip-flop on or off whenever you hit a marker
    if (line.start_with?(marker))...line.start_with?(marker)
      #as long as the flip-flop is on, it yields each line to a block to mess with it
      if block_given?
        yield(line)
      else
        #or upcases text if no block is given
        line.upcase
      end
    else
      #if the flip-flop is off, leave the line untouched
      line
    end
  end
  #join the lines and delete the marker from the file
  final_text = updated_lines.join.gsub(marker, "")
  #write the result to a file
  File.open("new_highlighted_file.txt", 'w') {|f| f.write(final_text) }
end
</code></pre>

<p>The function reads in a file and takes a string marker as an argument. Whenever a line starts with the marker, the flip-flop turns on, and the function starts yielding each line to a block. The block can do whatever with the line to modify and replace it. If no block is given, the function just upcases the line. When the function reaches another line that starts with a marker, the flip-flop switches back off and just returns lines untouched until it switches back on again.</p>

<p>Here&rsquo;s some sample text, which uses &lsquo;~&rsquo; as a marker:</p>

<pre><code class="text">Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam.&lt;/br&gt;

~
Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
quis nostrud.&lt;/br&gt;
~
Lorem ipsum&lt;/br&gt;

~Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
~proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&lt;/br&gt; 

Tadah!
</code></pre>

<p>And here&rsquo;s a sample run:</p>

<pre><code class="ruby">highlight_file("./test_file_1.txt", "~")
</code></pre>

<p>And here&rsquo;s the output:</p>

<pre><code class="text">Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam.&lt;/br&gt;


LOREM IPSUM DOLOR SIT AMET, CONSECTETUR ADIPISICING ELIT, SED DO EIUSMOD
TEMPOR INCIDIDUNT UT LABORE ET DOLORE MAGNA ALIQUA. UT ENIM AD MINIM VENIAM,
QUIS NOSTRUD.&lt;/BR&gt;

Lorem ipsum&lt;/br&gt;

LOREM IPSUM DOLOR SIT AMET, CONSECTETUR ADIPISICING ELIT, SED DO EIUSMOD
TEMPOR INCIDIDUNT UT LABORE ET DOLORE MAGNA ALIQUA. UT ENIM AD MINIM VENIAM,
PROIDENT, SUNT IN CULPA QUI OFFICIA DESERUNT MOLLIT ANIM ID EST LABORUM.&lt;/BR&gt; 

Tadah!
</code></pre>

<p>I didn&rsquo;t pass the method a block, so it just upcased the text surrounded by markers. Here&rsquo;s another sample run, this time with a block that adds <code>&lt;strong&gt;</code> and <code>&lt;em&gt;</code> tags to the lines between the markers:</p>

<pre><code class="ruby">highlight_file("./test_file_1.txt", "~") {|line|
 "&lt;strong&gt;&lt;em&gt;#{line}&lt;/em&gt;&lt;/strong&gt;"}
</code></pre>

<p> And here&rsquo;s the HTML output:</p>

<blockquote>
 Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam.</br>

<strong><em>
</em></strong><strong><em>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
</em></strong><strong><em>tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
</em></strong><strong><em>quis nostrud.</br>
</em></strong><strong><em>
</em></strong>Lorem ipsum</br>

<strong><em>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
</em></strong><strong><em>tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
</em></strong><strong><em>proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</br> 
</em></strong>
Tadah!
</blockquote>




<h3>Conclusion</h3>


<p>My function could probably use some cleaning up, but I think the flip-flop itself actually makes decent sense here. It&rsquo;s sees each marker as a switch, which I use to turn on or off certain behavior. It&rsquo;s not a tool I&rsquo;ll likely be using too often but the logic of it is fun to explore, and you never know when a useful application might turn up.</p>

<div id="container">
  <div id="background-text">

  </div>
  <div>
    <div class="big-caption">
      FIRST I WAS LIKE
    </div>
    <iframe src="//giphy.com/embed/dk3KF9iSGU9nG" width="240" height="247" frameBorder="0" style="max-width: 100%" class="giphy-embed" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>
    <div class="big-caption">
      BUT NOW I&#8217;M LIKE
    </div>
    <iframe src="//giphy.com/embed/cWV5NrLzjpke4" width="240" height="350" frameBorder="0" style="max-width: 100%" class="giphy-embed" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>
  </div>
</div>

]]></content>
  </entry>
  
</feed>

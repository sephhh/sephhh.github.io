<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Seph's Blog]]></title>
  <link href="http://sephhh.github.io/atom.xml" rel="self"/>
  <link href="http://sephhh.github.io/"/>
  <updated>2015-04-28T23:10:20-04:00</updated>
  <id>http://sephhh.github.io/</id>
  <author>
    <name><![CDATA[Seph Kramer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[.. Flip-flops ..]]></title>
    <link href="http://sephhh.github.io/blog/2015/04/28/flip-flops/"/>
    <updated>2015-04-28T16:50:22-04:00</updated>
    <id>http://sephhh.github.io/blog/2015/04/28/flip-flops</id>
    <content type="html"><![CDATA[<p>Flip-flops are a funky and fairly obscure feature in Ruby. In fact, there have been <a href="https://bugs.ruby-lang.org/issues/5400">murmers</a> about flip-flops being removed in future versions of Ruby altogether. Most folks probably wouldn&rsquo;t notice if these things disappeared from Ruby tomorrow, but this quirky mechanism can be nifty and fun to play around with once you get the hang of it.</p>

<p>I first came across flip-flops in Konstantin Haase&rsquo;s <a href="https://vimeo.com/61087285">talk at Ruby Australia</a> where he talks about obfuscation and presents his 6-line implementation of Sinatra. In the talk, Haase presents the following code and asks what it will produce.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="n">upto</span> <span class="mi">10</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">i</span> <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">3</span> <span class="o">.</span><span class="n">.</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">5</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Can you guess the output yourself? Any idea why? The key is the flip-flop, which is used here in the if condition. Let&rsquo;s take a look.</p>

<h3>Making Flippy Floppy</h3>


<p>In electronics, a flip-flop is a circuit that can have one of two states, On or Off (1 or 0). Along these lines, Ruby flip-flops act like a switch that can be flipped on and off (or like a gate that can be either open or closed). The syntax for a flip-flop uses a range operator <code>(..)</code> but the range spans between two conditions instead of two numbers. If you can hold those two ideas in your head, ranges and switches, you can sort of see how the flip-flop behaves like a switch that turns On for a certain range before turning Off again. What determines whether the if clause gets evaluated is not the truth of either condition, but the overall state of the flip-flop: On or Off. Here&rsquo;s the flip-flop from earlier again.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="n">upto</span> <span class="mi">10</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">i</span> <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">3</span> <span class="o">.</span><span class="n">.</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">5</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>When the first condition is met (<code>i==3</code>), you can imagine the switch flipping On, so the conditional if clause is executed, and the code prints <code>i</code>. That&rsquo;s all well and good&ndash;just what you&rsquo;d expect from an if statement when the condition is true. But here&rsquo;s the kicker: that if clause is executed the next time through the loop too, when <code>i</code> is 4. The flip-flop has been switched On, and that On or <code>true</code> state persists through subsequent interations. The if clause (in this case, <code>puts i</code>) continues to run on each iteration until the <em>second</em> condition is true (in this case, <code>i == 5</code>). That switches the flip-flop back off. If on a later iteration the first condition evalutes to true again, the flip-flop switches back On, and stays On, executing the if clause until the second condition is true again, and so on indefinitely.</p>

<p>So now maybe it makes sense (kind of) how the code actually evaluates:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="n">upto</span> <span class="mi">10</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">i</span> <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">3</span> <span class="o">.</span><span class="n">.</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">5</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 3</span>
</span><span class='line'><span class="c1"># 4</span>
</span><span class='line'><span class="c1"># 5</span>
</span></code></pre></td></tr></table></div></figure>


<p>In case you were starting to feel less confused, flip-flops can have either two or three dots between the two conditions, and they behave a bit differently in each case. If you use two dots, the second condition is evaluated <em>immediately</em> as soon as the first condition evaluates to <code>true</code>. That means that if both conditions are true on the same iteration, the switch will turn on and then immediately off again, executing the conditional clause exactly once:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="n">upto</span> <span class="mi">10</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">i</span> <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">3</span> <span class="o">.</span><span class="n">.</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">3</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 3</span>
</span></code></pre></td></tr></table></div></figure>


<p>With three dots, on the other hand, the second condition won&rsquo;t be evaluated until the iteration <em>after</em> the first condition becomes true.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="n">upto</span> <span class="mi">10</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">i</span> <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">3</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">3</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 3</span>
</span><span class='line'><span class="c1"># 4</span>
</span><span class='line'><span class="c1"># 5</span>
</span><span class='line'><span class="c1"># ... all the way on up to 10</span>
</span></code></pre></td></tr></table></div></figure>


<p>So in this code, instead of starting and then stopping at three, the flip-flop just switches On and never switches Off. It keeps printing <code>i</code> for the rest of the iterations (again, these examples come from Haase&rsquo;s talk)</p>

<h3>Flizz Fluzz</h3>


<p>If you feel like getting deeper into the weeds, here&rsquo;s a devious flip-flopping version of fizzbuzz written by <a href="https://gist.github.com/judofyr/3230984">Magnus Holm</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span><span class="o">=</span><span class="n">b</span><span class="o">=</span><span class="n">c</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">100</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">num</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">print</span> <span class="n">num</span><span class="p">,</span> <span class="sc">?\r</span><span class="p">,</span>
</span><span class='line'>    <span class="p">(</span><span class="s2">&quot;Fizz&quot;</span> <span class="k">unless</span> <span class="p">(</span><span class="n">a</span> <span class="o">=</span> <span class="o">!</span><span class="n">a</span><span class="p">)</span> <span class="o">.</span><span class="n">.</span> <span class="p">(</span><span class="n">a</span> <span class="o">=</span> <span class="o">!</span><span class="n">a</span><span class="p">)),</span>
</span><span class='line'>    <span class="p">(</span><span class="s2">&quot;Buzz&quot;</span> <span class="k">unless</span> <span class="p">(</span><span class="n">b</span> <span class="o">=</span> <span class="o">!</span><span class="n">b</span><span class="p">)</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span> <span class="o">!</span><span class="p">((</span><span class="n">c</span> <span class="o">=</span> <span class="o">!</span><span class="n">c</span><span class="p">)</span> <span class="o">.</span><span class="n">.</span> <span class="p">(</span><span class="n">c</span> <span class="o">=</span> <span class="o">!</span><span class="n">c</span><span class="p">))),</span>
</span><span class='line'>    <span class="sc">?\n</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s a very nice detailed breakdown of this code on <a href="https://juliansimioni.com/blog/deconstructing-fizz-buzz-with-flip-flops-in-ruby/">Julian Simioni&rsquo;s blog</a>, but here are a few highlights:</p>

<ul>
    <li>Notice how the flip-flop conditions actually include assignments&#8211;the truth value of the variable <code>a</code> is reversed each time one of those conditions is evaluated.</li>
    <li>Which condition is evaluated depends on the state of the flip-flop&#8211;the first condition will only be evaluated if the flip-flop is Off, and the second condition will only be evaluated if it&#8217;s On. This very craftily makes it so the flip-flop is Off every third iteration (which makes it print &#8220;Fizz&#8221;).</li>
    <li>The solution also very sneakily uses <code>\r</code>, which is a carriage return. That essentially moves the cursor back to the very front of the line without going to a new line, which means when you print you&#8217;ll just overwrite any characters written on that line already. (This way the solution doesn&#8217;t have to worry about skipping any numbers: it just overwrites them)</li>
</ul>




<h3>Trying it out</h3>


<p>I decided to give flip-flops a try on my own with a simple function meant to highlight or otherwise mess with certain marked portions of text. The idea is, whenever a line starts with a certain marker (like <code>~</code>), my function will do something to change or highlight each line of text, until that highlighting is turned off by a subsequent marker. Here it goes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">highlight_file</span><span class="p">(</span><span class="n">filepath</span><span class="p">,</span> <span class="n">marker</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">#read in the file</span>
</span><span class='line'>  <span class="n">orig_lines</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">readlines</span><span class="p">(</span><span class="n">filepath</span><span class="p">)</span>
</span><span class='line'>   <span class="n">updated_lines</span> <span class="o">=</span> <span class="n">orig_lines</span><span class="o">.</span><span class="n">collect</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#Turn the flip-flop on or off whenever you hit a marker</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">line</span><span class="o">.</span><span class="n">start_with?</span><span class="p">(</span><span class="n">marker</span><span class="p">))</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">line</span><span class="o">.</span><span class="n">start_with?</span><span class="p">(</span><span class="n">marker</span><span class="p">)</span>
</span><span class='line'>      <span class="c1">#as long as the flip-flop is on, it yields each line to a block to mess with it</span>
</span><span class='line'>      <span class="k">if</span> <span class="nb">block_given?</span>
</span><span class='line'>        <span class="k">yield</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="c1">#or upcases text if no block is given</span>
</span><span class='line'>        <span class="n">line</span><span class="o">.</span><span class="n">upcase</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="c1">#if the flip-flop is off, leave the line untouched</span>
</span><span class='line'>      <span class="n">line</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1">#join the lines and delete the marker from the file</span>
</span><span class='line'>  <span class="n">final_text</span> <span class="o">=</span> <span class="n">updated_lines</span><span class="o">.</span><span class="n">join</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="n">marker</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">#write the result to a file</span>
</span><span class='line'>  <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;new_highlighted_file.txt&quot;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">final_text</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The function reads in a file and takes a string marker as an argument. Whenever a line starts with the marker, the flip-flop turns on, and the function starts yielding each line to a block. The block can do whatever with the line to modify and replace it. If no block is given, the function just upcases the line. When the function reaches another line that starts with a marker, the flip-flop switches back off and just returns lines untouched until it switches back on again.</p>

<p>Here&rsquo;s some sample text, which uses &lsquo;~&rsquo; as a marker:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
</span><span class='line'>tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam.&lt;/br&gt;
</span><span class='line'>
</span><span class='line'>~
</span><span class='line'>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
</span><span class='line'>tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
</span><span class='line'>quis nostrud.&lt;/br&gt;
</span><span class='line'>~
</span><span class='line'>Lorem ipsum&lt;/br&gt;
</span><span class='line'>
</span><span class='line'>~Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
</span><span class='line'>tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
</span><span class='line'>~proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&lt;/br&gt;
</span><span class='line'>
</span><span class='line'>Tadah!
</span></code></pre></td></tr></table></div></figure>


<p>And here&rsquo;s a sample run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">highlight_file</span><span class="p">(</span><span class="s2">&quot;./test_file_1.txt&quot;</span><span class="p">,</span> <span class="s2">&quot;~&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here&rsquo;s the output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
</span><span class='line'>tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam.&lt;/br&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>LOREM IPSUM DOLOR SIT AMET, CONSECTETUR ADIPISICING ELIT, SED DO EIUSMOD
</span><span class='line'>TEMPOR INCIDIDUNT UT LABORE ET DOLORE MAGNA ALIQUA. UT ENIM AD MINIM VENIAM,
</span><span class='line'>QUIS NOSTRUD.&lt;/BR&gt;
</span><span class='line'>
</span><span class='line'>Lorem ipsum&lt;/br&gt;
</span><span class='line'>
</span><span class='line'>LOREM IPSUM DOLOR SIT AMET, CONSECTETUR ADIPISICING ELIT, SED DO EIUSMOD
</span><span class='line'>TEMPOR INCIDIDUNT UT LABORE ET DOLORE MAGNA ALIQUA. UT ENIM AD MINIM VENIAM,
</span><span class='line'>PROIDENT, SUNT IN CULPA QUI OFFICIA DESERUNT MOLLIT ANIM ID EST LABORUM.&lt;/BR&gt;
</span><span class='line'>
</span><span class='line'>Tadah!
</span></code></pre></td></tr></table></div></figure>


<p>I didn&rsquo;t pass the method a block, so it just upcased the text surrounded by markers. Here&rsquo;s another sample run, this time with a block that adds <code>&lt;strong&gt;</code> and <code>&lt;em&gt;</code> tags to the lines between the markers:</p>

<pre><code class="ruby">highlight_file("./test_file_1.txt", "~") {|line|
 "&lt;strong&gt;&lt;em&gt;#{line}&lt;/em&gt;&lt;/strong&gt;"}
</code></pre>

<p> And here&rsquo;s the HTML output:</p>

<blockquote>
 Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam.</br>

<strong><em>
</em></strong><strong><em>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
</em></strong><strong><em>tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
</em></strong><strong><em>quis nostrud.</br>
</em></strong><strong><em>
</em></strong>Lorem ipsum</br>

<strong><em>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
</em></strong><strong><em>tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
</em></strong><strong><em>proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</br> 
</em></strong>
Tadah!
</blockquote>




<h3>Conclusion</h3>


<p>My function could probably use some cleaning up, but I think the flip-flop itself actually makes decent sense here. It&rsquo;s sees each marker as a switch, which I use to turn on or off certain behavior. It&rsquo;s not a tool I&rsquo;ll likely be using too often but the logic of it is fun to explore, and you never know when a useful application might turn up.</p>

<div id="container">
  <div id="background-text">

  </div>
  <div>
    <div class="big-caption">
      FIRST I WAS LIKE
    </div>
    <iframe src="//giphy.com/embed/dk3KF9iSGU9nG" width="240" height="247" frameBorder="0" style="max-width: 100%" class="giphy-embed" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>
    <div class="big-caption">
      BUT NOW I&#8217;M LIKE
    </div>
    <iframe src="//giphy.com/embed/cWV5NrLzjpke4" width="240" height="350" frameBorder="0" style="max-width: 100%" class="giphy-embed" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>
  </div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[||= Or Equals ||=]]></title>
    <link href="http://sephhh.github.io/blog/2015/04/15/or-equals/"/>
    <updated>2015-04-15T16:50:22-04:00</updated>
    <id>http://sephhh.github.io/blog/2015/04/15/or-equals</id>
    <content type="html"><![CDATA[<p>Or Equals (<code>||=</code> also known as Pipes Equals) is one of my favorite Ruby expressions I&rsquo;ve encountered so far. It strikes me as sort of polite and considerate&ndash;not as pushy and uncompromising as other Ruby methods. Plus it comes in handy all the time. Let me explain how it works and why it can be so useful.</p>

<p><code>||=</code> basically checks to see if a variable has a value besides nil or false. If it does, <code>||=</code> stops right there and just leaves it be. If it doesn&rsquo;t, it assigns the variable a new value&ndash;the one you supply on the right side of the expression.</p>

<p>So <code>x ||= 10</code> checks <code>x</code>. If <code>x</code> is nil or false, it assigns <code>x</code> a value of <code>10</code>. If <code>x</code> already has a value, <code>||=</code> moves on without disturbing <code>x</code> at all. So polite and demure!</p>

<iframe src="//giphy.com/embed/HQvoFeZbR5wD6" width="480" height="360" frameBorder="0" style="max-width: 100%" class="giphy-embed" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p><caption><em>So sorry to bother you, please carry on, I&rsquo;ll just&hellip; go&hellip; </em></caption></p>

<h3>Or Equals in detail</h3>


<p>To explain it more precisely, <code>x ||= 10</code> is basically shorthand for <code>x || x = 10</code>. When Ruby looks at an Or statement like this, it evaluates the expression on the left first, and if that expression evaluates to <code>true</code>, it doesn&rsquo;t bother looking at the right half, because as soon as you have one true expression you know that the entire Or statement is true.</p>

<p>There are two subtleties to note here. One, note that this is a little different from how other similar looking expressions work.</p>

<p>For example, the following expression:</p>

<p><code>x += 10</code></p>

<p>is the same as</p>

<p><code>x = (x+ 10)</code></p>

<p>but</p>

<p><code>x ||= 10</code></p>

<p>is NOT the same as</p>

<p><code>x = (x || 10)</code></p>

<p>rather <code>x ||= 10</code> is more like</p>

<p><code>x || (x = 10)</code></p>

<p>The difference is subtle, but basically the point is that in <code>x||=10</code>, if <code>x</code> is truthy, that&rsquo;s the complete end of story, and Ruby does not bother performing ANY sort of assignment (not even the tautalogical assignment of <code>x = x</code>). That&rsquo;s why <code>x = (x || 10)</code> is not quite an accurate translation of <code>||=</code>. Ruby doesn&rsquo;t do anything with the <code>=</code> operator unless the value in question is falsy. You could see how this could make a difference in some scenarios, like if you are dealing with a custom getter method (i.e. <code>name=</code>) where the <code>=</code> operator does more than just perform a simple assignment.</p>

<p>There&rsquo;s another small caveat&ndash;technically <code>x||= 10</code> is not EXACTLY like <code>x || (x = 10)</code>. If <code>x</code> is previously undefined, executing <code>x || (x = 10)</code> will throw you an undefined variable error, but <code>x||= 10</code> will work just fine. Proof, once more, of the polite nature of <code>||=</code>. (For more on this, and a deeper look under the hood in general, there&rsquo;s a good post by Peter Cooper <a href="http://www.rubyinside.com/what-rubys-double-pipe-or-equals-really-does-5488.html">here</a>)</p>

<h3>Handy usages</h3>


<p>When is ||= useful? All the time! I find myself using it when iterating through a collection that might have repeats that need to be consolidated. It&rsquo;s great for setting up a counter too. For example, say we want sort through and count a bunch of pants. Each pair of pants is represented by a hash like this:</p>

<p><code>{type: jeans, color: blue}</code></p>

<p>And say we want to combine a bunch of these hashes into a more organized hash like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">pants_hash</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'><span class="ss">:jeans</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;blue&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">count</span><span class="p">:</span> <span class="mi">3</span> <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;green&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">count</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="ss">:slacks</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;black&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">count</span><span class="p">:</span> <span class="mi">2</span> <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;khaki&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">count</span><span class="p">:</span> <span class="mi">1</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="ss">:sweats</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;gray&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">count</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The following method takes the first type of hash and adds it to the second, using <code>||=</code> to build new keys when necessary without overwriting any existing keys in the organized hash.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">add_pants</span><span class="p">(</span><span class="n">single_pants_hash</span><span class="p">,</span> <span class="n">organized_pants_hash</span><span class="p">)</span>
</span><span class='line'>    <span class="n">type_key</span> <span class="o">=</span> <span class="n">single_pants_hash</span><span class="o">[</span><span class="ss">:type</span><span class="o">].</span><span class="n">to_sym</span>
</span><span class='line'>    <span class="n">color_key</span> <span class="o">=</span> <span class="n">single_pants_hash</span><span class="o">[</span><span class="ss">:color</span><span class="o">]</span>
</span><span class='line'>      <span class="c1">#if this type of pant is not in the organized hash yet, add it here pointing to an empty hash</span>
</span><span class='line'>    <span class="n">organized_pants_hash</span><span class="o">[</span><span class="n">type_key</span><span class="o">]||=</span> <span class="p">{}</span>
</span><span class='line'>      <span class="c1">#same deal with color</span>
</span><span class='line'>    <span class="n">organized_pants_hash</span><span class="o">[</span><span class="n">type_key</span><span class="o">][</span><span class="n">color_key</span><span class="o">]</span> <span class="o">||=</span> <span class="p">{}</span>
</span><span class='line'>      <span class="c1">#add a count key-value pair to this inner hash if it doesn&#39;t exist yet</span>
</span><span class='line'>    <span class="n">organized_pants_hash</span><span class="o">[</span><span class="n">type_key</span><span class="o">][</span><span class="n">color_key</span><span class="o">][</span><span class="ss">:count</span><span class="o">]||=</span> <span class="mi">0</span>
</span><span class='line'>      <span class="c1">#now you can safely increment the count.</span>
</span><span class='line'>    <span class="n">organized_pants_hash</span><span class="o">[</span><span class="n">type_key</span><span class="o">][</span><span class="n">color_key</span><span class="o">][</span><span class="ss">:count</span><span class="o">]+=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now if you have a whole bunch of single pants hashes, you can call this method on each of them to add them to a more organized hash. The beauty is it doesn&rsquo;t matter if your organized hash has a ton of entries already, or if you are just now building it from scratch. Either way, this method won&rsquo;t overwrite anything because it&rsquo;s gingerly using <code>||=</code> throughout.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">single_pants_array</span> <span class="o">=</span> <span class="o">[</span><span class="p">{</span><span class="ss">type</span><span class="p">:</span> <span class="s2">&quot;jeans&quot;</span><span class="p">,</span> <span class="ss">color</span><span class="p">:</span> <span class="s2">&quot;blue&quot;</span><span class="p">},</span>
</span><span class='line'><span class="p">{</span><span class="ss">type</span><span class="p">:</span> <span class="s2">&quot;slacks&quot;</span><span class="p">,</span> <span class="ss">color</span><span class="p">:</span> <span class="s2">&quot;black&quot;</span><span class="p">},</span>
</span><span class='line'><span class="p">{</span><span class="ss">type</span><span class="p">:</span> <span class="s2">&quot;jeans&quot;</span><span class="p">,</span> <span class="ss">color</span><span class="p">:</span> <span class="s2">&quot;blue&quot;</span><span class="p">},</span>
</span><span class='line'><span class="p">{</span><span class="ss">type</span><span class="p">:</span> <span class="s2">&quot;jeans&quot;</span><span class="p">,</span> <span class="ss">color</span><span class="p">:</span> <span class="s2">&quot;blue&quot;</span><span class="p">},</span>
</span><span class='line'><span class="p">{</span><span class="ss">type</span><span class="p">:</span> <span class="s2">&quot;slacks&quot;</span><span class="p">,</span> <span class="ss">color</span><span class="p">:</span> <span class="s2">&quot;khaki&quot;</span><span class="p">},</span>
</span><span class='line'><span class="p">{</span><span class="ss">type</span><span class="p">:</span> <span class="s2">&quot;slacks&quot;</span><span class="p">,</span> <span class="ss">color</span><span class="p">:</span> <span class="s2">&quot;khaki&quot;</span><span class="p">},</span>
</span><span class='line'><span class="p">{</span><span class="ss">type</span><span class="p">:</span> <span class="s2">&quot;sweats&quot;</span><span class="p">,</span> <span class="ss">color</span><span class="p">:</span> <span class="s2">&quot;gray&quot;</span><span class="p">},</span>
</span><span class='line'><span class="p">{</span><span class="ss">type</span><span class="p">:</span> <span class="s2">&quot;jeans&quot;</span><span class="p">,</span> <span class="ss">color</span><span class="p">:</span> <span class="s2">&quot;black&quot;</span><span class="p">},</span>
</span><span class='line'><span class="p">{</span><span class="ss">type</span><span class="p">:</span> <span class="s2">&quot;slacks&quot;</span><span class="p">,</span> <span class="ss">color</span><span class="p">:</span> <span class="s2">&quot;blue&quot;</span><span class="p">},</span>
</span><span class='line'><span class="p">{</span><span class="ss">type</span><span class="p">:</span> <span class="s2">&quot;sweats&quot;</span><span class="p">,</span> <span class="ss">color</span><span class="p">:</span> <span class="s2">&quot;black&quot;</span><span class="p">}</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">single_pants_array</span><span class="o">.</span><span class="n">each_with_object</span><span class="p">({})</span> <span class="k">do</span> <span class="o">|</span><span class="n">single_pants_hash</span><span class="p">,</span> <span class="n">new_object</span><span class="o">|</span>
</span><span class='line'>  <span class="n">add_pants</span><span class="p">(</span><span class="n">single_pants_hash</span><span class="p">,</span> <span class="n">new_object</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt;{:jeans=&gt;{&quot;blue&quot;=&gt;{:count=&gt;3}, &quot;black&quot;=&gt;{:count=&gt;1}}, :slacks=&gt;{&quot;black&quot;=&gt;{:count=&gt;1}, &quot;khaki&quot;=&gt;{:count=&gt;2}, &quot;blue&quot;=&gt;{:count=&gt;1}}, :sweats=&gt;{&quot;gray&quot;=&gt;{:count=&gt;1}, &quot;black&quot;=&gt;{:count=&gt;1}}} </span>
</span></code></pre></td></tr></table></div></figure>


<p>Tada! We get our organized pants hash, with all the counts added up. With the power of <code>||=</code> our method can handle new entries and repeats equally well.</p>

<h3>Memoization</h3>


<p><code>||=</code> can also be useful for memoization. To memoize basically just means to remember the result of a particular function call. If the function is meant to return the same result each time it&rsquo;s called, you should probably memoize that result. This is especially important if a function call is really laborious.</p>

<p>The idea is, the first time you call the function, it runs in full, and then you store or cache the result somewhere. From then on, any time the function is called, instead of going through the long laborious code that produced the result the first time, you just spit out the result you have stored. <code>||=</code> provides a very simple way to do this.</p>

<p>For example, here&rsquo;s a simple Dog class definition:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Dog</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:breed</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">breed</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">breed</span> <span class="o">=</span> <span class="n">breed</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">pictures</span>
</span><span class='line'>    <span class="c1">#This method spits out 500 dog pictures from the internet</span>
</span><span class='line'>    <span class="c1">#Below is a magic function that finds all those pictures but takes a really long time</span>
</span><span class='line'>    <span class="vi">@pictures</span> <span class="o">||=</span> <span class="n">internet_magic_stuff</span><span class="p">(</span><span class="mi">500</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The class is pretty simple, it has name and breed attributes and accessors. But then it also has a <code>pictures</code> method that&rsquo;s a lot more time-consuming. The first time the method is called, <code>@pictures</code> has no value, so it goes to the other side of the <code>||=</code> and runs <code>internet_magic_stuff(500)</code>, storing/memoizing the result in the instance variable <code>@pictures</code>. That means the method will take a long time to run the first time it&rsquo;s called, but the second time the method is called, or any time after that, the object will just spit out the data it has stored in <code>@pictures</code> without bothering to call or even think about the labor-intensive <code>internet_magic_stuff</code> function.</p>

<h3>Conclusion</h3>


<p>I glommed on to <code>||=</code> pretty early into my Ruby learning experience, I think mostly because I just liked its vibe. But whether or not you appreciate it&rsquo;s subtle charm, <code>||=</code> is a very useful little expression, especially for memoization and certain iteration tasks.</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Seph's Blog]]></title>
  <link href="http://sephhh.github.io/atom.xml" rel="self"/>
  <link href="http://sephhh.github.io/"/>
  <updated>2015-06-04T10:22:06-04:00</updated>
  <id>http://sephhh.github.io/</id>
  <author>
    <name><![CDATA[Seph Kramer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Playing with the Canvas: Trippy Text]]></title>
    <link href="http://sephhh.github.io/blog/2015/06/03/playing-with-the-canvas-trippy-text/"/>
    <updated>2015-06-03T22:28:55-04:00</updated>
    <id>http://sephhh.github.io/blog/2015/06/03/playing-with-the-canvas-trippy-text</id>
    <content type="html"><![CDATA[<p>Here&rsquo;s a little doo-hickey I made:</p>

<p data-height="268" data-theme-id="0" data-slug-hash="ZGLMKm" data-default-tab="result" data-user="sephhh" class='codepen'>See the Pen <a href='http://codepen.io/sephhh/pen/ZGLMKm/'>Trippy Text</a> by Seph Kramer (<a href='http://codepen.io/sephhh'>@sephhh</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<script async src="//assets.codepen.io/assets/embed/ei.js"></script>


<p>Some text bounces around the screen, changing colors (controlled in part by mouse movements). You can click to move the text, and if you press return you can type in your own text.</p>

<p>A few reasons I made this:</p>

<ul>
    <li>I wanted to play around with an HTML5 Canvas</li>
    <li>I wanted to get some practice with jQuery event handlers</li>
    <li>I wanted something that was kinda fun to play with!</li>
</ul>


<p>Here I thought I&rsquo;d walk through some basics of using JavaScript to draw on a <code>&lt;canvas&gt;</code> element, and explain a bit of my code.</p>

<h3>Using the Canvas</h3>


<p>The first thing you need is a <code>&lt;canvas&gt;</code> element. You&rsquo;ll probably want to give it an id too so you can easily select it with JavaScript. Here I&rsquo;m also giving it a width and height, as well as a border to make it easier to see on the page.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;canvas</span> <span class="na">id=</span><span class="s">&quot;myCanvas&quot;</span> <span class="na">height=</span><span class="s">200</span> <span class="na">width=</span><span class="s">200</span> <span class="na">style=</span><span class="s">&quot;border:1px solid #000000&quot;</span><span class="nt">&gt;&lt;/canvas&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now to start drawing on this canvas we need to create a new <em>context</em>. By creating this context, you get a JavaScript object that you can call a bunch of methods on to render things on your canvas.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="c1">// set up initial variables</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;myCanvas&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">ctx</span> <span class="o">=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="s2">&quot;2d&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//...more to come</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here I select the canvas element, save it as <code>c</code>. Then I create a context object, which I save as <code>ctx</code> by calling <code>c.getContext("2d")</code>. (<code>getContext</code> also accepts <code>webgl</code> as an argument if you want to mess with 3D, but that&rsquo;s a whole other story).</p>

<p>Now we can call all kinds of methods on <code>ctx</code> to start drawing stuff. Here&rsquo;s how to draw some simple lines:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="nx">ctx</span><span class="p">.</span><span class="nx">beginPath</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">ctx</span><span class="p">.</span><span class="nx">moveTo</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">ctx</span><span class="p">.</span><span class="nx">lineTo</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span><span class="mi">200</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">ctx</span><span class="p">.</span><span class="nx">moveTo</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">100</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">ctx</span><span class="p">.</span><span class="nx">lineTo</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span><span class="mi">100</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">ctx</span><span class="p">.</span><span class="nx">stroke</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p><canvas id="canvas1" height=200 width=200 style="border:1px solid #000000;"></canvas></p>

<p>You can imagine this code is controlling a pen. <code>moveTo</code> moves the pen point to a pixel location on the canvas, then <code>lineTo</code> tells it to put down the point and draw to another location. But nothing will actually appear on the canvas until we call <code>stroke</code>.</p>

<p>There&rsquo;s plenty of other methods for drawing other shapes and text, but let&rsquo;s move on to making a simple animation.</p>

<h3>A Simple Animation</h3>


<p>Here I&rsquo;ll animate a red circle so that it floats across the canvas. Here&rsquo;s a function that takes an x-coordinate and draws a red circle there:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">drawCircle</span><span class="p">(</span><span class="nx">x</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">ctx</span><span class="p">.</span><span class="nx">beginPath</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">ctx</span><span class="p">.</span><span class="nx">arc</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="mi">100</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">ctx</span><span class="p">.</span><span class="nx">fillStyle</span><span class="o">=</span><span class="s2">&quot;red&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">ctx</span><span class="p">.</span><span class="nx">fill</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s pretty easy to make the circle move across the screen&ndash;all we need to do is repeat the following steps very quickly:</p>

<ul>
    <li>Clear off the canvas</li>
    <li>Draw a circle at pixel x</li>
    <li>Increment x</li>
</ul>


<p>Here&rsquo;s the code to do that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="c1">//clear out the entire canvas</span>
</span><span class='line'>  <span class="nx">ctx</span><span class="p">.</span><span class="nx">clearRect</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">200</span><span class="p">,</span><span class="mi">200</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">//draw a circle at x</span>
</span><span class='line'>  <span class="nx">drawCircle</span><span class="p">(</span><span class="nx">x</span><span class="o">%</span><span class="mi">200</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">//increment x</span>
</span><span class='line'>  <span class="nx">x</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'><span class="p">},</span> <span class="mi">25</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here I use <code>setInterval</code> to run a function every 25 milliseconds. Each time that function runs, it clears the screen, draws a new circle, then increments <code>x</code> so the circle will be drawn slightly to the right next time around. I use modulo in the expression <code>x%200</code> to make the circle wrap around the canvas once <code>x</code> is higher than 200.</p>

<p><canvas id="canvas2" height=200 width=200 style="border:1px solid #000000;"></canvas></p>

<h3>Trippy Text Event Handlers</h3>


<p>For my little trippy text toy, I use <code>setInterval</code> the same way, but with a little extra logic. During each animation step I have to check if the text needs to bounce, plus I oscillate the blue value of the text&rsquo;s color during each step. Also, I skip clearing the screen at each step so that the trail of the text remains on screen.</p>

<p>On top of that I added a couple of jQuery handlers to allow some interaction. This one responds to mouse movements to change the color of the text:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">mousemove</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">tt</span><span class="p">.</span><span class="nx">gValue</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">pageX</span><span class="o">*</span><span class="nx">lScale</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">tt</span><span class="p">.</span><span class="nx">rValue</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">pageY</span><span class="o">*</span><span class="nx">hScale</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, <code>tt</code> is an object I defined to represent the floating text. When the mouse moves, I use the mouse&rsquo;s x and y location, scale it to a value between 0 and 256, and set the <code>gValue</code> and <code>rValue</code> of the text object accordingly, changing it&rsquo;s color.</p>

<p>Here&rsquo;s the code that moves the text when you click the screen.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">pageX</span> <span class="o">&gt;</span> <span class="nx">c</span><span class="p">.</span><span class="nx">width</span><span class="o">-</span><span class="nx">tt</span><span class="p">.</span><span class="nx">xBuffer</span><span class="p">()){</span>
</span><span class='line'>       <span class="nx">tt</span><span class="p">.</span><span class="nx">textX</span> <span class="o">=</span> <span class="nx">c</span><span class="p">.</span><span class="nx">width</span><span class="o">-</span><span class="nx">tt</span><span class="p">.</span><span class="nx">xBuffer</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>       <span class="nx">tt</span><span class="p">.</span><span class="nx">textX</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">pageX</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">pageY</span> <span class="o">&lt;=</span> <span class="mi">50</span><span class="p">){</span>
</span><span class='line'>       <span class="nx">tt</span><span class="p">.</span><span class="nx">textY</span> <span class="o">=</span> <span class="mi">50</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>       <span class="nx">tt</span><span class="p">.</span><span class="nx">textY</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">pageY</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The basic idea is that when the canvas is clicked, the text should move to that click location. But first I check to see if the click is too close to an edge of the canvas, in which case I make sure there is a buffer (i.e. <code>tt.xbuffer</code>) between the text and the edge of the canvas (<code>c.width</code>).</p>

<h3>Conclusion</h3>


<p>That&rsquo;s a quick rundown of working with a canvas in JavaScript, and some basics features of my little toy. It&rsquo;s pretty easy to start having fun with the canvas, I definitely recommend fooling around with it sometime.</p>

<script>
  var c1 = document.getElementById("canvas1");
  var ctx1 = c1.getContext("2d");
 
  ctx1.beginPath();
  ctx1.moveTo(100,0);
  ctx1.lineTo(100,200);
  ctx1.moveTo(0,100);
  ctx1.lineTo(200,100);
  ctx1.stroke();

  var c2 = document.getElementById("canvas2");
  var ctx2 = c2.getContext("2d");
  
  function drawCircle(x){
    ctx2.beginPath();
    ctx2.arc(x,100,10,0,2*Math.PI);
    ctx2.fillStyle="red";
    ctx2.fill();
  }

  var x = 0;

  setInterval(function(){ 
    //clear out the entire canvas
    ctx2.clearRect(0,0,200,200);
    //draw a circle at x
    drawCircle(x%200);
    //increment x
    x++;
}, 25);

</script>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Rails App: Lessons Learned]]></title>
    <link href="http://sephhh.github.io/blog/2015/05/12/my-first-rails-app-lessons-learned/"/>
    <updated>2015-05-12T22:00:59-04:00</updated>
    <id>http://sephhh.github.io/blog/2015/05/12/my-first-rails-app-lessons-learned</id>
    <content type="html"><![CDATA[<p>This past week me and <a href="https://github.com/tmurray002">Tim</a> built a Rails app called <a href="https://github.com/sephhh/ConcertCurator">ConcertCurator</a>. Basically this app lists a bunch of upcoming concerts in NYC and has some nice ways to browse through them. This is my first time working on a Rails app from scratch, and I thought I&rsquo;d blog about two challenges we ran into along the way, and the workarounds we found.</p>

<h3>Challenge 1: Find Similar Show</h3>


<p>One challenge was getting this button to work:</p>

<p><img src="http://sephhh.github.io/images/genre_button.png" alt="Similar Show Button"></p>

<p>The idea here is to take an event, and if the event has genres associated with it, find another show that has at least one of those generes associated with it too.</p>

<p>The logic isn&rsquo;t super complex here, and we were able to get some code working before too long. But even though the button worked, it was extremely slow. Here&rsquo;s that first pass.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Inside the Event model</span>
</span><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">find_similar_shows</span><span class="p">(</span><span class="n">genre_ids</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">select</span> <span class="k">do</span> <span class="o">|</span><span class="n">event</span><span class="o">|</span>
</span><span class='line'>    <span class="n">event</span><span class="o">.</span><span class="n">artists</span><span class="o">.</span><span class="n">any?</span> <span class="k">do</span> <span class="o">|</span><span class="n">artist</span><span class="o">|</span>
</span><span class='line'>      <span class="n">genre_ids</span> <span class="o">&amp;</span> <span class="n">artist</span><span class="o">.</span><span class="n">genres</span><span class="o">.</span><span class="n">pluck</span><span class="p">(</span><span class="ss">:id</span><span class="p">)</span> <span class="o">!=</span> <span class="o">[]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This method is inside the <code>Event</code> model. It works something like this:</p>

<ul>
  <li>Iterate through all the events</li>
  <li>For each event, look through all the associated artists</li>
  <li> Finally, for each artist see if it has any genres in common with the ones we passed in</li>
  <li> If so, add that to the selection of events that the method returns</li>
</ul>


<p>The logic is sound here, and the code works, but it&rsquo;s SOOOO slow because it&rsquo;s making SOOOO many queries to the database. These nested iterations are really costly.</p>

<p>Here&rsquo;s the refactored code. This new version is much faster:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Inside the Event model</span>
</span><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">find_similar_shows</span><span class="p">(</span><span class="n">genre_id</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">joins</span><span class="p">(</span><span class="ss">:artists</span> <span class="o">=&gt;</span> <span class="ss">:genres</span><span class="p">)</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">genres</span><span class="p">:</span> <span class="p">{</span><span class="nb">id</span><span class="p">:</span> <span class="n">genre_id</span><span class="p">})</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This version uses <code>joins</code> to join the genres table to the events table through the artists table, then uses <code>where</code> to make a single query to that giant joined table. This version really cooperates with SQL much better and uses its strengths. Instead of querying the database a ton of times with little simple queries, we just make a single, complex query to the database and let SQL do more of the heavy lifting. This spits out a response muuuuch much faster than the original version.</p>

<h3>Challenge 2: Loading a Map</h3>


<p>On each page that shows an event or a venue, our app uses the Google Maps API to show the location of the venue.</p>

<p><img src="http://sephhh.github.io/images/map_sample.png" alt="A Map on an Event Page"></p>

<p>We didn&rsquo;t do anything super fancy here&ndash;we had each venue&rsquo;s longitude and latitude from another API so we just had to plug that in and render a map.</p>

<p>The tricky part was getting the map to actually show up on the page. At first we had a bug where, when we first navigated to a page, no map would show, but then after manually refreshing it would pop up. What gives?</p>

<p>Here&rsquo;s our original code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">function</span> <span class="kp">initialize</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">var</span> <span class="n">myLatlng</span> <span class="o">=</span> <span class="sr">//</span><span class="n">grab</span> <span class="n">lat</span><span class="o">-</span><span class="n">long</span> <span class="n">of</span> <span class="n">current</span> <span class="n">venue</span>
</span><span class='line'>  <span class="n">var</span> <span class="n">my_venue</span> <span class="o">=</span> <span class="sr">//</span><span class="n">grab</span> <span class="n">the</span> <span class="n">venue</span> <span class="nb">name</span>
</span><span class='line'>  <span class="n">var</span> <span class="n">mapOptions</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="sr">//m</span><span class="n">ap</span> <span class="n">options</span> <span class="n">here</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="n">var</span> <span class="n">map</span> <span class="o">=</span> <span class="kp">new</span> <span class="n">google</span><span class="o">.</span><span class="n">maps</span><span class="o">.</span><span class="n">Map</span><span class="p">(</span><span class="n">document</span><span class="o">.</span><span class="n">getElementById</span><span class="p">(</span><span class="s1">&#39;map-canvas&#39;</span><span class="p">),</span>
</span><span class='line'>      <span class="n">mapOptions</span><span class="p">);</span>
</span><span class='line'>  <span class="n">var</span> <span class="n">marker</span> <span class="o">=</span> <span class="kp">new</span> <span class="n">google</span><span class="o">.</span><span class="n">maps</span><span class="o">.</span><span class="n">Marker</span><span class="p">({</span>
</span><span class='line'>  <span class="ss">position</span><span class="p">:</span> <span class="n">myLatlng</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">map</span><span class="p">:</span> <span class="n">map</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">title</span><span class="p">:</span> <span class="n">my_venue</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">google</span><span class="o">.</span><span class="n">maps</span><span class="o">.</span><span class="n">event</span><span class="o">.</span><span class="n">addDomListener</span><span class="p">(</span><span class="n">window</span><span class="p">,</span> <span class="s1">&#39;load&#39;</span><span class="p">,</span> <span class="kp">initialize</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Basically, this code sets up some variabales we need for the map inside an <code>initialize</code> function. Then, the last line listens for the window <code>load</code> event, at which point it calls <code>initialize</code> and renders the map. So why did we have to refresh the page to trigger this? Why didn&rsquo;t the window <code>load</code> event trigger our function every time we navigated to the page?</p>

<p>The answer has to do with Turbolinks!!!</p>

<iframe src="//giphy.com/embed/cRH5deQTgTMR2" width="480" height="360" frameBorder="0" style="max-width: 100%" class="giphy-embed" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>




<h4>Turbolinks</h4>


<p>Turbolinks are this feature built into Rails that loads the page without &ldquo;really&rdquo; &ldquo;loading&rdquo; the &ldquo;page&rdquo;. When you click on a link, it uses an AJAX call to just swap in the new body of the page, rather than loading the whole page from scratch. This makes clicking around faster, which is all well and good, but it doesn&rsquo;t trigger the window &lsquo;load&rsquo; event that our code is patiently listening for.</p>

<p>So here&rsquo;s the fix&ndash;just need to add one more line of code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">google</span><span class="o">.</span><span class="n">maps</span><span class="o">.</span><span class="n">event</span><span class="o">.</span><span class="n">addDomListener</span><span class="p">(</span><span class="n">window</span><span class="p">,</span> <span class="s1">&#39;load&#39;</span><span class="p">,</span> <span class="kp">initialize</span><span class="p">);</span>
</span><span class='line'><span class="n">google</span><span class="o">.</span><span class="n">maps</span><span class="o">.</span><span class="n">event</span><span class="o">.</span><span class="n">addDomListener</span><span class="p">(</span><span class="n">window</span><span class="p">,</span> <span class="s1">&#39;page:load&#39;</span><span class="p">,</span> <span class="kp">initialize</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, on top of listening to the normal window <code>load</code> event, we&rsquo;re also listening for the <code>page:load</code> event. This is a special event that Turbolinks creates&ndash;since it&rsquo;s bypassing a normal load, Turbolinks gives us this alternate way for us to hook into this part of the cycle and trigger our <code>initialize</code> function. See <a href="https://github.com/rails/turbolinks/blob/master/README.md">here</a> for more documentation on Turbolinks.</p>

<h3>Conclusion</h3>


<p>Building this app was a lot of fun! Even some of the tricker parts were satisfying to work through. These two challenges I just walked through I thought were particularly interesting, and definitely taught me some handy lessons. Hope you agree!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.. Flip-flops ..]]></title>
    <link href="http://sephhh.github.io/blog/2015/04/28/flip-flops/"/>
    <updated>2015-04-28T16:50:22-04:00</updated>
    <id>http://sephhh.github.io/blog/2015/04/28/flip-flops</id>
    <content type="html"><![CDATA[<p>Flip-flops are a funky and fairly obscure feature in Ruby. In fact, there have been <a href="https://bugs.ruby-lang.org/issues/5400">murmers</a> about flip-flops being removed in future versions of Ruby altogether. Most folks probably wouldn&rsquo;t notice if these things disappeared from Ruby tomorrow, but this quirky mechanism can be nifty and fun to play around with once you get the hang of it.</p>

<p>I first came across flip-flops in Konstantin Haase&rsquo;s <a href="https://vimeo.com/61087285">talk at Ruby Australia</a> where he talks about obfuscation and presents his 6-line implementation of Sinatra. In the talk, Haase presents the following code and asks what it will produce.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="n">upto</span> <span class="mi">10</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">i</span> <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">3</span> <span class="o">.</span><span class="n">.</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">5</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Can you guess the output yourself? Any idea why? The key is the flip-flop, which is used here in the if condition. Let&rsquo;s take a look.</p>

<h3>Making Flippy Floppy</h3>


<p>In electronics, a flip-flop is a circuit that can have one of two states, On or Off (1 or 0). Along these lines, Ruby flip-flops act like a switch that can be flipped on and off (or like a gate that can be either open or closed). The syntax for a flip-flop uses a range operator <code>(..)</code> but the range spans between two conditions instead of two numbers. If you can hold those two ideas in your head, ranges and switches, you can sort of see how the flip-flop behaves like a switch that turns On for a certain range before turning Off again. What determines whether the if clause gets evaluated is not the truth of either condition, but the overall state of the flip-flop: On or Off. Here&rsquo;s the flip-flop from earlier again.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="n">upto</span> <span class="mi">10</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">i</span> <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">3</span> <span class="o">.</span><span class="n">.</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">5</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>When the first condition is met (<code>i==3</code>), you can imagine the switch flipping On, so the conditional if clause is executed, and the code prints <code>i</code>. That&rsquo;s all well and good&ndash;just what you&rsquo;d expect from an if statement when the condition is true. But here&rsquo;s the kicker: that if clause is executed the next time through the loop too, when <code>i</code> is 4. The flip-flop has been switched On, and that On or <code>true</code> state persists through subsequent iterations. The if clause (in this case, <code>puts i</code>) continues to run on each iteration until the <em>second</em> condition is true (in this case, <code>i == 5</code>). That switches the flip-flop back off. If on a later iteration the first condition evalutes to true again, the flip-flop switches back On, and stays On, executing the if clause until the second condition is true again, and so on indefinitely.</p>

<p>So now maybe it makes sense (kind of) how the code actually evaluates:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="n">upto</span> <span class="mi">10</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">i</span> <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">3</span> <span class="o">.</span><span class="n">.</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">5</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 3</span>
</span><span class='line'><span class="c1"># 4</span>
</span><span class='line'><span class="c1"># 5</span>
</span></code></pre></td></tr></table></div></figure>


<p>In case you were starting to feel less confused, flip-flops can have either two or three dots between the two conditions, and they behave a bit differently in each case. If you use two dots, the second condition is evaluated <em>immediately</em> as soon as the first condition evaluates to <code>true</code>. That means that if both conditions are true on the same iteration, the switch will turn on and then immediately off again, executing the conditional clause exactly once:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="n">upto</span> <span class="mi">10</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">i</span> <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">3</span> <span class="o">.</span><span class="n">.</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">3</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 3</span>
</span></code></pre></td></tr></table></div></figure>


<p>With three dots, on the other hand, the second condition won&rsquo;t be evaluated until the iteration <em>after</em> the first condition becomes true.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span><span class="n">upto</span> <span class="mi">10</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">i</span> <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">3</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">3</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># 3</span>
</span><span class='line'><span class="c1"># 4</span>
</span><span class='line'><span class="c1"># 5</span>
</span><span class='line'><span class="c1"># ... all the way on up to 10</span>
</span></code></pre></td></tr></table></div></figure>


<p>So in this code, instead of starting and then stopping at three, the flip-flop just switches On and never switches Off. It keeps printing <code>i</code> for the rest of the iterations (again, these examples come from Haase&rsquo;s talk)</p>

<h3>Flizz Fluzz</h3>


<p>If you feel like getting deeper into the weeds, here&rsquo;s a devious flip-flopping version of fizzbuzz written by <a href="https://gist.github.com/judofyr/3230984">Magnus Holm</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span><span class="o">=</span><span class="n">b</span><span class="o">=</span><span class="n">c</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">100</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">num</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">print</span> <span class="n">num</span><span class="p">,</span> <span class="sc">?\r</span><span class="p">,</span>
</span><span class='line'>    <span class="p">(</span><span class="s2">&quot;Fizz&quot;</span> <span class="k">unless</span> <span class="p">(</span><span class="n">a</span> <span class="o">=</span> <span class="o">!</span><span class="n">a</span><span class="p">)</span> <span class="o">.</span><span class="n">.</span> <span class="p">(</span><span class="n">a</span> <span class="o">=</span> <span class="o">!</span><span class="n">a</span><span class="p">)),</span>
</span><span class='line'>    <span class="p">(</span><span class="s2">&quot;Buzz&quot;</span> <span class="k">unless</span> <span class="p">(</span><span class="n">b</span> <span class="o">=</span> <span class="o">!</span><span class="n">b</span><span class="p">)</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span> <span class="o">!</span><span class="p">((</span><span class="n">c</span> <span class="o">=</span> <span class="o">!</span><span class="n">c</span><span class="p">)</span> <span class="o">.</span><span class="n">.</span> <span class="p">(</span><span class="n">c</span> <span class="o">=</span> <span class="o">!</span><span class="n">c</span><span class="p">))),</span>
</span><span class='line'>    <span class="sc">?\n</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s a very nice detailed breakdown of this code on <a href="https://juliansimioni.com/blog/deconstructing-fizz-buzz-with-flip-flops-in-ruby/">Julian Simioni&rsquo;s blog</a>, but here are a few highlights:</p>

<ul>
    <li>Notice how the flip-flop conditions actually include assignments&#8211;the truth value of the variable <code>a</code> is reversed each time one of those conditions is evaluated.</li>
    <li>Which condition is evaluated depends on the state of the flip-flop&#8211;the first condition will only be evaluated if the flip-flop is Off, and the second condition will only be evaluated if it&#8217;s On. This very craftily makes it so the flip-flop is Off every third iteration (which makes it print &#8220;Fizz&#8221;).</li>
    <li>The solution also very sneakily uses <code>\r</code>, which is a carriage return. That essentially moves the cursor back to the very front of the line without going to a new line, which means when you print you&#8217;ll just overwrite any characters written on that line already. (This way the solution doesn&#8217;t have to worry about skipping any numbers: it just overwrites them)</li>
</ul>




<h3>Trying it out</h3>


<p>I decided to give flip-flops a try on my own with a simple function meant to highlight or otherwise mess with certain marked portions of text. The idea is, whenever a line starts with a certain marker (like <code>~</code>), my function will do something to change or highlight each line of text, until that highlighting is turned off by a subsequent marker. Here it goes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">highlight_file</span><span class="p">(</span><span class="n">filepath</span><span class="p">,</span> <span class="n">marker</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">#read in the file</span>
</span><span class='line'>  <span class="n">orig_lines</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">readlines</span><span class="p">(</span><span class="n">filepath</span><span class="p">)</span>
</span><span class='line'>   <span class="n">updated_lines</span> <span class="o">=</span> <span class="n">orig_lines</span><span class="o">.</span><span class="n">collect</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#Turn the flip-flop on or off whenever you hit a marker</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">line</span><span class="o">.</span><span class="n">start_with?</span><span class="p">(</span><span class="n">marker</span><span class="p">))</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">line</span><span class="o">.</span><span class="n">start_with?</span><span class="p">(</span><span class="n">marker</span><span class="p">)</span>
</span><span class='line'>      <span class="c1">#as long as the flip-flop is on, it yields each line to a block to mess with it</span>
</span><span class='line'>      <span class="k">if</span> <span class="nb">block_given?</span>
</span><span class='line'>        <span class="k">yield</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="c1">#or upcases text if no block is given</span>
</span><span class='line'>        <span class="n">line</span><span class="o">.</span><span class="n">upcase</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="c1">#if the flip-flop is off, leave the line untouched</span>
</span><span class='line'>      <span class="n">line</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="c1">#join the lines and delete the marker from the file</span>
</span><span class='line'>  <span class="n">final_text</span> <span class="o">=</span> <span class="n">updated_lines</span><span class="o">.</span><span class="n">join</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="n">marker</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">#write the result to a file</span>
</span><span class='line'>  <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;new_highlighted_file.txt&quot;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">final_text</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The function reads in a file and takes a string marker as an argument. Whenever a line starts with the marker, the flip-flop turns on, and the function starts yielding each line to a block. The block can do whatever with the line to modify and replace it. If no block is given, the function just upcases the line. When the function reaches another line that starts with a marker, the flip-flop switches back off and just returns lines untouched until it switches back on again.</p>

<p>Here&rsquo;s some sample text, which uses &lsquo;~&rsquo; as a marker:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
</span><span class='line'>tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam.&lt;/br&gt;
</span><span class='line'>
</span><span class='line'>~
</span><span class='line'>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
</span><span class='line'>tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
</span><span class='line'>quis nostrud.&lt;/br&gt;
</span><span class='line'>~
</span><span class='line'>Lorem ipsum&lt;/br&gt;
</span><span class='line'>
</span><span class='line'>~Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
</span><span class='line'>tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
</span><span class='line'>~proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&lt;/br&gt;
</span><span class='line'>
</span><span class='line'>Tadah!
</span></code></pre></td></tr></table></div></figure>


<p>And here&rsquo;s a sample run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">highlight_file</span><span class="p">(</span><span class="s2">&quot;./test_file_1.txt&quot;</span><span class="p">,</span> <span class="s2">&quot;~&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here&rsquo;s the output:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
</span><span class='line'>tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam.&lt;/br&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>LOREM IPSUM DOLOR SIT AMET, CONSECTETUR ADIPISICING ELIT, SED DO EIUSMOD
</span><span class='line'>TEMPOR INCIDIDUNT UT LABORE ET DOLORE MAGNA ALIQUA. UT ENIM AD MINIM VENIAM,
</span><span class='line'>QUIS NOSTRUD.&lt;/BR&gt;
</span><span class='line'>
</span><span class='line'>Lorem ipsum&lt;/br&gt;
</span><span class='line'>
</span><span class='line'>LOREM IPSUM DOLOR SIT AMET, CONSECTETUR ADIPISICING ELIT, SED DO EIUSMOD
</span><span class='line'>TEMPOR INCIDIDUNT UT LABORE ET DOLORE MAGNA ALIQUA. UT ENIM AD MINIM VENIAM,
</span><span class='line'>PROIDENT, SUNT IN CULPA QUI OFFICIA DESERUNT MOLLIT ANIM ID EST LABORUM.&lt;/BR&gt;
</span><span class='line'>
</span><span class='line'>Tadah!
</span></code></pre></td></tr></table></div></figure>


<p>I didn&rsquo;t pass the method a block, so it just upcased the text surrounded by markers. Here&rsquo;s another sample run, this time with a block that adds <code>&lt;strong&gt;</code> and <code>&lt;em&gt;</code> tags to the lines between the markers:</p>

<pre><code class="ruby">highlight_file("./test_file_1.txt", "~") {|line|
 "&lt;strong&gt;&lt;em&gt;#{line}&lt;/em&gt;&lt;/strong&gt;"}
</code></pre>

<p> And here&rsquo;s the HTML output:</p>

<blockquote>
 Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam.</br>

<strong><em>
</em></strong><strong><em>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
</em></strong><strong><em>tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
</em></strong><strong><em>quis nostrud.</br>
</em></strong><strong><em>
</em></strong>Lorem ipsum</br>

<strong><em>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
</em></strong><strong><em>tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
</em></strong><strong><em>proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</br> 
</em></strong>
Tadah!
</blockquote>




<h3>Conclusion</h3>


<p>My function could probably use some cleaning up, but I think the flip-flop itself actually makes decent sense here. It&rsquo;s sees each marker as a switch, which I use to turn on or off certain behavior. It&rsquo;s not a tool I&rsquo;ll likely be using too often but the logic of it is fun to explore, and you never know when a useful application might turn up.</p>

<div id="container">
  <div id="background-text">

  </div>
  <div>
    <div class="big-caption">
      FIRST I WAS LIKE
    </div>
    <iframe src="//giphy.com/embed/dk3KF9iSGU9nG" width="240" height="247" frameBorder="0" style="max-width: 100%" class="giphy-embed" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>
    <div class="big-caption">
      BUT NOW I&#8217;M LIKE
    </div>
    <iframe src="//giphy.com/embed/cWV5NrLzjpke4" width="240" height="350" frameBorder="0" style="max-width: 100%" class="giphy-embed" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>
  </div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[||= Or Equals ||=]]></title>
    <link href="http://sephhh.github.io/blog/2015/04/15/or-equals/"/>
    <updated>2015-04-15T16:50:22-04:00</updated>
    <id>http://sephhh.github.io/blog/2015/04/15/or-equals</id>
    <content type="html"><![CDATA[<p>Or Equals (<code>||=</code> also known as Pipes Equals) is one of my favorite Ruby expressions I&rsquo;ve encountered so far. It strikes me as sort of polite and considerate&ndash;not as pushy and uncompromising as other Ruby methods. Plus it comes in handy all the time. Let me explain how it works and why it can be so useful.</p>

<p><code>||=</code> basically checks to see if a variable has a value besides nil or false. If it does, <code>||=</code> stops right there and just leaves it be. If it doesn&rsquo;t, it assigns the variable a new value&ndash;the one you supply on the right side of the expression.</p>

<p>So <code>x ||= 10</code> checks <code>x</code>. If <code>x</code> is nil or false, it assigns <code>x</code> a value of <code>10</code>. If <code>x</code> already has a value, <code>||=</code> moves on without disturbing <code>x</code> at all. So polite and demure!</p>

<iframe src="//giphy.com/embed/HQvoFeZbR5wD6" width="480" height="360" frameBorder="0" style="max-width: 100%" class="giphy-embed" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p><caption><em>So sorry to bother you, please carry on, I&rsquo;ll just&hellip; go&hellip; </em></caption></p>

<h3>Or Equals in detail</h3>


<p>To explain it more precisely, <code>x ||= 10</code> is basically shorthand for <code>x || x = 10</code>. When Ruby looks at an Or statement like this, it evaluates the expression on the left first, and if that expression evaluates to <code>true</code>, it doesn&rsquo;t bother looking at the right half, because as soon as you have one true expression you know that the entire Or statement is true.</p>

<p>There are two subtleties to note here. One, note that this is a little different from how other similar looking expressions work.</p>

<p>For example, the following expression:</p>

<p><code>x += 10</code></p>

<p>is the same as</p>

<p><code>x = (x+ 10)</code></p>

<p>but</p>

<p><code>x ||= 10</code></p>

<p>is NOT the same as</p>

<p><code>x = (x || 10)</code></p>

<p>rather <code>x ||= 10</code> is more like</p>

<p><code>x || (x = 10)</code></p>

<p>The difference is subtle, but basically the point is that in <code>x||=10</code>, if <code>x</code> is truthy, that&rsquo;s the complete end of story, and Ruby does not bother performing ANY sort of assignment (not even the tautalogical assignment of <code>x = x</code>). That&rsquo;s why <code>x = (x || 10)</code> is not quite an accurate translation of <code>||=</code>. Ruby doesn&rsquo;t do anything with the <code>=</code> operator unless the value in question is falsy. You could see how this could make a difference in some scenarios, like if you are dealing with a custom getter method (i.e. <code>name=</code>) where the <code>=</code> operator does more than just perform a simple assignment.</p>

<p>There&rsquo;s another small caveat&ndash;technically <code>x||= 10</code> is not EXACTLY like <code>x || (x = 10)</code>. If <code>x</code> is previously undefined, executing <code>x || (x = 10)</code> will throw you an undefined variable error, but <code>x||= 10</code> will work just fine. Proof, once more, of the polite nature of <code>||=</code>. (For more on this, and a deeper look under the hood in general, there&rsquo;s a good post by Peter Cooper <a href="http://www.rubyinside.com/what-rubys-double-pipe-or-equals-really-does-5488.html">here</a>)</p>

<h3>Handy usages</h3>


<p>When is ||= useful? All the time! I find myself using it when iterating through a collection that might have repeats that need to be consolidated. It&rsquo;s great for setting up a counter too. For example, say we want sort through and count a bunch of pants. Each pair of pants is represented by a hash like this:</p>

<p><code>{type: jeans, color: blue}</code></p>

<p>And say we want to combine a bunch of these hashes into a more organized hash like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">pants_hash</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'><span class="ss">:jeans</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;blue&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">count</span><span class="p">:</span> <span class="mi">3</span> <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;green&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">count</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="ss">:slacks</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;black&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">count</span><span class="p">:</span> <span class="mi">2</span> <span class="p">},</span>
</span><span class='line'>  <span class="s2">&quot;khaki&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">count</span><span class="p">:</span> <span class="mi">1</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="ss">:sweats</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;gray&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">count</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The following method takes the first type of hash and adds it to the second, using <code>||=</code> to build new keys when necessary without overwriting any existing keys in the organized hash.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">add_pants</span><span class="p">(</span><span class="n">single_pants_hash</span><span class="p">,</span> <span class="n">organized_pants_hash</span><span class="p">)</span>
</span><span class='line'>    <span class="n">type_key</span> <span class="o">=</span> <span class="n">single_pants_hash</span><span class="o">[</span><span class="ss">:type</span><span class="o">].</span><span class="n">to_sym</span>
</span><span class='line'>    <span class="n">color_key</span> <span class="o">=</span> <span class="n">single_pants_hash</span><span class="o">[</span><span class="ss">:color</span><span class="o">]</span>
</span><span class='line'>      <span class="c1">#if this type of pant is not in the organized hash yet, add it here pointing to an empty hash</span>
</span><span class='line'>    <span class="n">organized_pants_hash</span><span class="o">[</span><span class="n">type_key</span><span class="o">]||=</span> <span class="p">{}</span>
</span><span class='line'>      <span class="c1">#same deal with color</span>
</span><span class='line'>    <span class="n">organized_pants_hash</span><span class="o">[</span><span class="n">type_key</span><span class="o">][</span><span class="n">color_key</span><span class="o">]</span> <span class="o">||=</span> <span class="p">{}</span>
</span><span class='line'>      <span class="c1">#add a count key-value pair to this inner hash if it doesn&#39;t exist yet</span>
</span><span class='line'>    <span class="n">organized_pants_hash</span><span class="o">[</span><span class="n">type_key</span><span class="o">][</span><span class="n">color_key</span><span class="o">][</span><span class="ss">:count</span><span class="o">]||=</span> <span class="mi">0</span>
</span><span class='line'>      <span class="c1">#now you can safely increment the count.</span>
</span><span class='line'>    <span class="n">organized_pants_hash</span><span class="o">[</span><span class="n">type_key</span><span class="o">][</span><span class="n">color_key</span><span class="o">][</span><span class="ss">:count</span><span class="o">]+=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now if you have a whole bunch of single pants hashes, you can call this method on each of them to add them to a more organized hash. The beauty is it doesn&rsquo;t matter if your organized hash has a ton of entries already, or if you are just now building it from scratch. Either way, this method won&rsquo;t overwrite anything because it&rsquo;s gingerly using <code>||=</code> throughout.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">single_pants_array</span> <span class="o">=</span> <span class="o">[</span><span class="p">{</span><span class="ss">type</span><span class="p">:</span> <span class="s2">&quot;jeans&quot;</span><span class="p">,</span> <span class="ss">color</span><span class="p">:</span> <span class="s2">&quot;blue&quot;</span><span class="p">},</span>
</span><span class='line'><span class="p">{</span><span class="ss">type</span><span class="p">:</span> <span class="s2">&quot;slacks&quot;</span><span class="p">,</span> <span class="ss">color</span><span class="p">:</span> <span class="s2">&quot;black&quot;</span><span class="p">},</span>
</span><span class='line'><span class="p">{</span><span class="ss">type</span><span class="p">:</span> <span class="s2">&quot;jeans&quot;</span><span class="p">,</span> <span class="ss">color</span><span class="p">:</span> <span class="s2">&quot;blue&quot;</span><span class="p">},</span>
</span><span class='line'><span class="p">{</span><span class="ss">type</span><span class="p">:</span> <span class="s2">&quot;jeans&quot;</span><span class="p">,</span> <span class="ss">color</span><span class="p">:</span> <span class="s2">&quot;blue&quot;</span><span class="p">},</span>
</span><span class='line'><span class="p">{</span><span class="ss">type</span><span class="p">:</span> <span class="s2">&quot;slacks&quot;</span><span class="p">,</span> <span class="ss">color</span><span class="p">:</span> <span class="s2">&quot;khaki&quot;</span><span class="p">},</span>
</span><span class='line'><span class="p">{</span><span class="ss">type</span><span class="p">:</span> <span class="s2">&quot;slacks&quot;</span><span class="p">,</span> <span class="ss">color</span><span class="p">:</span> <span class="s2">&quot;khaki&quot;</span><span class="p">},</span>
</span><span class='line'><span class="p">{</span><span class="ss">type</span><span class="p">:</span> <span class="s2">&quot;sweats&quot;</span><span class="p">,</span> <span class="ss">color</span><span class="p">:</span> <span class="s2">&quot;gray&quot;</span><span class="p">},</span>
</span><span class='line'><span class="p">{</span><span class="ss">type</span><span class="p">:</span> <span class="s2">&quot;jeans&quot;</span><span class="p">,</span> <span class="ss">color</span><span class="p">:</span> <span class="s2">&quot;black&quot;</span><span class="p">},</span>
</span><span class='line'><span class="p">{</span><span class="ss">type</span><span class="p">:</span> <span class="s2">&quot;slacks&quot;</span><span class="p">,</span> <span class="ss">color</span><span class="p">:</span> <span class="s2">&quot;blue&quot;</span><span class="p">},</span>
</span><span class='line'><span class="p">{</span><span class="ss">type</span><span class="p">:</span> <span class="s2">&quot;sweats&quot;</span><span class="p">,</span> <span class="ss">color</span><span class="p">:</span> <span class="s2">&quot;black&quot;</span><span class="p">}</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">single_pants_array</span><span class="o">.</span><span class="n">each_with_object</span><span class="p">({})</span> <span class="k">do</span> <span class="o">|</span><span class="n">single_pants_hash</span><span class="p">,</span> <span class="n">new_object</span><span class="o">|</span>
</span><span class='line'>  <span class="n">add_pants</span><span class="p">(</span><span class="n">single_pants_hash</span><span class="p">,</span> <span class="n">new_object</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt;{:jeans=&gt;{&quot;blue&quot;=&gt;{:count=&gt;3}, &quot;black&quot;=&gt;{:count=&gt;1}}, :slacks=&gt;{&quot;black&quot;=&gt;{:count=&gt;1}, &quot;khaki&quot;=&gt;{:count=&gt;2}, &quot;blue&quot;=&gt;{:count=&gt;1}}, :sweats=&gt;{&quot;gray&quot;=&gt;{:count=&gt;1}, &quot;black&quot;=&gt;{:count=&gt;1}}} </span>
</span></code></pre></td></tr></table></div></figure>


<p>Tada! We get our organized pants hash, with all the counts added up. With the power of <code>||=</code> our method can handle new entries and repeats equally well.</p>

<h3>Memoization</h3>


<p><code>||=</code> can also be useful for memoization. To memoize basically just means to remember the result of a particular function call. If the function is meant to return the same result each time it&rsquo;s called, you should probably memoize that result. This is especially important if a function call is really laborious.</p>

<p>The idea is, the first time you call the function, it runs in full, and then you store or cache the result somewhere. From then on, any time the function is called, instead of going through the long laborious code that produced the result the first time, you just spit out the result you have stored. <code>||=</code> provides a very simple way to do this.</p>

<p>For example, here&rsquo;s a simple Dog class definition:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Dog</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:breed</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="n">breed</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>    <span class="nb">self</span><span class="o">.</span><span class="n">breed</span> <span class="o">=</span> <span class="n">breed</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">pictures</span>
</span><span class='line'>    <span class="c1">#This method spits out 500 dog pictures from the internet</span>
</span><span class='line'>    <span class="c1">#Below is a magic function that finds all those pictures but takes a really long time</span>
</span><span class='line'>    <span class="vi">@pictures</span> <span class="o">||=</span> <span class="n">internet_magic_stuff</span><span class="p">(</span><span class="mi">500</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The class is pretty simple, it has name and breed attributes and accessors. But then it also has a <code>pictures</code> method that&rsquo;s a lot more time-consuming. The first time the method is called, <code>@pictures</code> has no value, so it goes to the other side of the <code>||=</code> and runs <code>internet_magic_stuff(500)</code>, storing/memoizing the result in the instance variable <code>@pictures</code>. That means the method will take a long time to run the first time it&rsquo;s called, but the second time the method is called, or any time after that, the object will just spit out the data it has stored in <code>@pictures</code> without bothering to call or even think about the labor-intensive <code>internet_magic_stuff</code> function.</p>

<h3>Conclusion</h3>


<p>I glommed on to <code>||=</code> pretty early into my Ruby learning experience, I think mostly because I just liked its vibe. But whether or not you appreciate it&rsquo;s subtle charm, <code>||=</code> is a very useful little expression, especially for memoization and certain iteration tasks.</p>
]]></content>
  </entry>
  
</feed>
